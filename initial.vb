Option Strict Off
Option Explicit On

'Import SDK and Framework namespaces
Imports Rhino
Imports Rhino.Geometry
Imports Rhino.Collections

Imports Grasshopper
Imports Grasshopper.Kernel
Imports Grasshopper.Kernel.Data
Imports Grasshopper.Kernel.Types

Imports GH_IO
Imports GH_IO.Serialization

Imports System
Imports System.IO
Imports System.Xml
Imports System.Xml.Linq
Imports System.Linq
Imports System.Data
Imports System.Drawing
Imports System.Reflection
Imports System.Collections
Imports System.Windows.Forms
Imports Microsoft.VisualBasic
Imports System.Collections.Generic
Imports System.Runtime.InteropServices



'Code generated by Grasshopper(R) (except for RunScript() content and Additional content)
'Copyright (C) 2013 - Robert McNeel & Associates
<System.Runtime.CompilerServices.CompilerGenerated()> _
Public Class Script_Instance
  Inherits GH_ScriptInstance
  'Implements IGH_ScriptInstance

#Region "Members"
  ''' <summary>List of error messages. Do not modify this list directly.</summary>
  Private __err As New List(Of String)

  ''' <summary>List of print messages. Do not modify this list directly, use the Print() and Reflect() functions instead.</summary>
  Private __out As New List(Of String)

  ''' <summary>Represents the current Rhino document.</summary>
  Private doc As RhinoDoc = RhinoDoc.ActiveDoc

  ''' <summary>Represents the Script component which maintains this script.</summary>
  Public owner As Grasshopper.Kernel.IGH_ActiveObject

  ''' <summary>Represents the number of times that RunScript has been called within this solution.</summary>
  Public runCount As Int32
#End Region

#Region "Utility functions"
  ''' <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  ''' <param name="text">String to print.</param>
  Private Sub Print(ByVal text As String)
    __out.Add(text)
  End Sub

  ''' <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  ''' <param name="format">String format.</param>
  ''' <param name="args">Formatting parameters.</param>
  Private Sub Print(ByVal format As String, ByVal ParamArray args As Object())
    __out.Add(String.Format(format, args))
  End Sub

  ''' <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  ''' <param name="obj">Object instance to parse.</param>
  Private Sub Reflect(ByVal obj As Object)
    __out.Add(GH_ScriptComponentUtilities.ReflectType_VB(obj))
  End Sub

  ''' <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  ''' <param name="obj">Object instance to parse.</param>
  Private Sub Reflect(ByVal obj As Object, ByVal method_name As String)
    __out.Add(GH_ScriptComponentUtilities.ReflectType_VB(obj, method_name))
  End Sub
#End Region

  ''' <summary>
  ''' This procedure contains the user code. Input parameters are provided as ByVal arguments,
  ''' Output parameter are ByRef arguments. You don't have to assign output parameters,
  ''' they will be null by default.
  ''' </summary>
  Private Sub RunScript(ByVal geometry As GeometryBase, ByVal iterations As Integer, ByVal toggle As Double, ByVal multiplier As Double, ByRef A As Object) 
    Dim result As New List(Of GeometryBase)



    Select Case toggle
      Case 1
        For k As Int32 = 0 To iterations
          Dim duplicate As GeometryBase = geometry.Duplicate()
          duplicate.Transform(Transform.Translation(k * multiplier, 0, 0))
          result.Add(duplicate)
        Next
      Case 2
        For k As Int32 = 0 To iterations
          Dim duplicate As GeometryBase = geometry.Duplicate()
          duplicate.Transform(Transform.Translation(0, k * multiplier, 0))
          result.Add(duplicate)
        Next
      Case 3
        For k As Int32 = 0 To iterations
          Dim duplicate As GeometryBase = geometry.Duplicate()
          duplicate.Transform(Transform.Translation(0, 0, k * multiplier))
          result.Add(duplicate)
        Next
      Case 4
        For k As Int32 = 0 To iterations
          Dim duplicate As GeometryBase = geometry.Duplicate()
          duplicate.Transform(Transform.Translation(-k * multiplier, 0, 0))
          result.Add(duplicate)
        Next
      Case 5
        For k As Int32 = 0 To iterations
          Dim duplicate As GeometryBase = geometry.Duplicate()
          duplicate.Transform(Transform.Translation(0, -k * multiplier, 0))
          result.Add(duplicate)
        Next
      Case 6
        For k As Int32 = 0 To iterations
          Dim duplicate As GeometryBase = geometry.Duplicate()
          duplicate.Transform(Transform.Translation(0, 0, -k * multiplier))
          result.Add(duplicate)
        Next

    End Select



    A = result

  End Sub 

  '<Custom additional code> 

  '</Custom additional code> 

End Class
